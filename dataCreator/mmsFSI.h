#ifndef MMSFSI_H_
#define MMSFSI_H_

#include <iostream>
#include <math.h>
#include <stdlib.h>
#include <string>

using namespace std;



          static double mmsFsi01SourceFX(double x, double y, double z, double tau) {
                     double pi=M_PI;
                      double value;
                      if(x==0.5) x=0.4999999999;
                      value=   -0.1e-2 * pow(pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1)), -0.1e1 / 0.2e1) * (pow(pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1)), -0.1e1 / 0.2e1) * (0.5000000000e-8 * pi * (0.2747252747e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) - 0.5494505495e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * pow(x, 0.3e1) + 0.8241758245e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x * x - 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x + 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x - 0.1167582417e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * x * x + 0.7554945054e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * x - 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.4e1) + 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(x, 0.4e1) + 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(x, 0.3e1) + 0.1167582417e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x - 0.7554945054e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.4e1) - 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) - 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * x + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(x, 0.4e1) + 0.1373626374e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) - 0.1030219780e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) + 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * x * x - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * x - 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(x, 0.3e1) - 0.1717032967e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) + 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * x * x - 0.2747252747e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) + 0.1030219780e10 * pi * pow(cos(y * pi), 0.2e1) + 0.1717032967e10 * pow(cos(x * pi), 0.2e1) * pi - 0.5494505495e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x) * pow(0.1e1 + 0.2e1 * x * x - 0.2e1 * x, -0.3e1) + 0.1e1 * (0.250e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) + 0.250e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x)) * (0.1e1 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) + pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x))) * (0.2e1 * (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1)) * (0.8e1 * x - 0.4e1) - 0.4e1 * pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.2e1) * fabs(0.2e1 * x - 0.1e1) * fabs(0.2e1 * x - 0.1e1) / (0.2e1 * x - 0.1e1)) / 0.2e1 + sqrt(pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1))) * (0.5000000000e-8 * pi * (-0.7554945054e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) - 0.1648351648e12 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x * x - 0.6868131868e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x + 0.2472527472e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * x * x - 0.2335164834e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * x + 0.2472527472e11 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x - 0.1648351648e11 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x - 0.1648351648e11 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) - 0.1648351648e11 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(x, 0.3e1) - 0.1373626374e11 * sin(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau) - 0.6868131868e10 * cos(x * pi) * pi * pi * x * x * sin(x * pi) + 0.6868131868e10 * cos(x * pi) * pi * pi * x * sin(x * pi) + 0.3434065934e10 * cos(x * pi) * pi * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(x * pi) + 0.5494505494e10 * cos(x * pi) * pi * pi * pow(cos(y * pi), 0.2e1) * sin(x * pi) - 0.2472527472e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x + 0.2335164834e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x + 0.1648351648e11 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) - 0.5494505494e10 * cos(x * pi) * pi * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(x * pi) + 0.5494505495e11 * sin(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * pow(x, 0.3e1) - 0.8241758245e11 * sin(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x * x + 0.6868131868e10 * cos(x * pi) * pi * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x * sin(x * pi) - 0.6868131868e10 * cos(x * pi) * pi * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * sin(x * pi) + 0.2335164834e11 * cos(x * pi) * pi * pi * pow(cos(y * pi), 0.2e1) * x * x * sin(x * pi) - 0.1510989011e11 * cos(x * pi) * pi * pi * pow(cos(y * pi), 0.2e1) * x * sin(x * pi) + 0.8241758240e10 * pi * pi * pow(cos(y * pi), 0.2e1) * cos(x * pi) * pow(x, 0.4e1) * sin(x * pi) - 0.1648351648e11 * pi * pi * pow(cos(y * pi), 0.2e1) * cos(x * pi) * pow(x, 0.3e1) * sin(x * pi) + 0.5494505495e11 * sin(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x + 0.6868131868e10 * pow(cos(x * pi), 0.2e1) * pi * x - 0.5494505495e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) - 0.2472527472e11 * pi * pow(cos(y * pi), 0.2e1) * x * x + 0.1648351648e11 * pi * pow(cos(y * pi), 0.2e1) * x + 0.1648351648e11 * pi * pow(cos(y * pi), 0.2e1) * pow(x, 0.3e1) + 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) + 0.7554945054e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) - 0.3434065934e10 * cos(x * pi) * pi * pi * sin(x * pi) + 0.1648351648e11 * pi * pi * pow(cos(y * pi), 0.2e1) * cos(x * pi) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) * sin(x * pi) + 0.1510989011e11 * cos(x * pi) * pi * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * sin(x * pi) - 0.8241758240e10 * pi * pi * pow(cos(y * pi), 0.2e1) * cos(x * pi) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.4e1) * sin(x * pi) - 0.2335164834e11 * cos(x * pi) * pi * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x * sin(x * pi) - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) - 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi + 0.1648351649e12 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x) * pow(0.1e1 + 0.2e1 * x * x - 0.2e1 * x, -0.3e1) - 0.1500000000e-7 * pi * (0.2747252747e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) - 0.5494505495e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * pow(x, 0.3e1) + 0.8241758245e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x * x - 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x + 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x - 0.1167582417e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * x * x + 0.7554945054e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * x - 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.4e1) + 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(x, 0.4e1) + 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(x, 0.3e1) + 0.1167582417e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x - 0.7554945054e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.4e1) - 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) - 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * x + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(x, 0.4e1) + 0.1373626374e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) - 0.1030219780e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) + 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * x * x - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * x - 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(x, 0.3e1) - 0.1717032967e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) + 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * x * x - 0.2747252747e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) + 0.1030219780e10 * pi * pow(cos(y * pi), 0.2e1) + 0.1717032967e10 * pow(cos(x * pi), 0.2e1) * pi - 0.5494505495e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x) * pow(0.1e1 + 0.2e1 * x * x - 0.2e1 * x, -0.4e1) * (0.4e1 * x - 0.2e1) + 0.1e1 * (-0.5000000000e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.3e1 / 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) * fabs(0.2e1 * x - 0.1e1) * fabs(0.2e1 * x - 0.1e1) / (0.2e1 * x - 0.1e1) - 0.250e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, -0.2e1) * (0.8e1 * x - 0.4e1) - 0.5000000000e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.3e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) * fabs(0.2e1 * x - 0.1e1) * fabs(0.2e1 * x - 0.1e1) / (0.2e1 * x - 0.1e1) - 0.1000e3 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * (-0.2e1 * x + 0.1e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) - 0.250e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) * pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, -0.2e1) * (0.8e1 * x - 0.4e1)) * (0.1e1 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) + pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x)) + 0.1e1 * (0.250e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) + 0.250e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x)) * (-0.2000000000e1 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.3e1 / 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) * fabs(0.2e1 * x - 0.1e1) * fabs(0.2e1 * x - 0.1e1) / (0.2e1 * x - 0.1e1) - 0.1e1 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, -0.2e1) * (0.8e1 * x - 0.4e1) - 0.2000000000e1 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.3e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) * fabs(0.2e1 * x - 0.1e1) * fabs(0.2e1 * x - 0.1e1) / (0.2e1 * x - 0.1e1) - 0.4e1 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * (-0.2e1 * x + 0.1e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) - pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) * pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, -0.2e1) * (0.8e1 * x - 0.4e1))) + 0.1201923077e2 * sqrt(pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1))) * pow(pi, 0.3e1) * cos(x * pi) * pow(cos(y * pi), 0.2e1) * pow(sin(0.5000000000e0 * pi * tau), 0.2e1) * sin(x * pi) / (0.1e1 + 0.2e1 * x * x - 0.2e1 * x) - 0.1201923077e2 * sqrt(pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1))) * pi * pi * (0.4e1 - 0.8e1 * x + cos(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau)) * sin(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) / (0.1e1 + 0.2e1 * x * x - 0.2e1 * x));
                      if (isnormal(value)==0){
                                                                  cout << "fx(x,y,z) value is bounded to 0.0 at x=" << x << " and y= " <<y<<endl;
                                                                  return 0.0;}
                                                                  cout <<"fx(x,y,z) value is " << value << endl;
                                                                  return value;
                       return value;
          }
          static double mmsFsi01SourceFY(double x, double y, double z, double tau) {
             double pi=M_PI;
                     double value;
                     if(x==0.5) x=0.4999999999;
                     value=  -0.1e-2 * pow(pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1)), -0.1e1 / 0.2e1) * (0.6009615385e1 * pow(pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1)), -0.1e1 / 0.2e1) * pi * (0.4e1 - 0.8e1 * x + cos(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau)) * sin(x * pi) * cos(y * pi) * sin(0.5000000000e0 * pi * tau) / (0.1e1 + 0.2e1 * x * x - 0.2e1 * x) * (0.2e1 * (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1)) * (0.8e1 * x - 0.4e1) - 0.4e1 * pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.2e1) * fabs(0.2e1 * x - 0.1e1) * fabs(0.2e1 * x - 0.1e1) / (0.2e1 * x - 0.1e1)) + 0.1201923077e2 * sqrt(pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1))) * pi * (-0.8e1 - sin(x * pi) * pi * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau)) * sin(x * pi) * cos(y * pi) * sin(0.5000000000e0 * pi * tau) / (0.1e1 + 0.2e1 * x * x - 0.2e1 * x) + 0.1201923077e2 * sqrt(pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1))) * pi * pi * (0.4e1 - 0.8e1 * x + cos(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau)) * cos(x * pi) * cos(y * pi) * sin(0.5000000000e0 * pi * tau) / (0.1e1 + 0.2e1 * x * x - 0.2e1 * x) - 0.1201923077e2 * sqrt(pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1))) * pi * (0.4e1 - 0.8e1 * x + cos(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau)) * sin(x * pi) * cos(y * pi) * sin(0.5000000000e0 * pi * tau) * pow(0.1e1 + 0.2e1 * x * x - 0.2e1 * x, -0.2e1) * (0.4e1 * x - 0.2e1) + 0.1000000000e-7 * sqrt(pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1))) * (-0.8241758240e10 * x * cos(x * pi) * pi * pi * cos(y * pi) * sin(0.5000000000e0 * pi * tau) + 0.4120879121e10 * cos(x * pi) * pi * pi * cos(y * pi) * sin(0.5000000000e0 * pi * tau) + 0.7898351648e10 * pow(cos(x * pi), 0.2e1) * pow(pi, 0.3e1) * cos(y * pi) * sin(y * pi) - 0.7898351648e10 * pow(cos(x * pi), 0.2e1) * pow(pi, 0.3e1) * cos(y * pi) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(y * pi) - 0.6868131868e10 * cos(y * pi) * pow(pi, 0.3e1) * sin(y * pi) - 0.1373626374e11 * x * x * cos(y * pi) * pow(pi, 0.3e1) * sin(y * pi) + 0.1373626374e11 * x * cos(y * pi) * pow(pi, 0.3e1) * sin(y * pi) + 0.6868131868e10 * cos(y * pi) * pow(pi, 0.3e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(y * pi) + 0.1373626374e11 * x * x * cos(y * pi) * pow(pi, 0.3e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(y * pi) - 0.1373626374e11 * x * cos(y * pi) * pow(pi, 0.3e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(y * pi) + 0.1373626374e11 * x * x * pow(cos(x * pi), 0.2e1) * pow(pi, 0.3e1) * cos(y * pi) * sin(y * pi) - 0.1373626374e11 * x * pow(cos(x * pi), 0.2e1) * pow(pi, 0.3e1) * cos(y * pi) * sin(y * pi) - 0.1373626374e11 * x * x * pow(cos(x * pi), 0.2e1) * pow(pi, 0.3e1) * cos(y * pi) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(y * pi) + 0.1373626374e11 * x * pow(cos(x * pi), 0.2e1) * pow(pi, 0.3e1) * cos(y * pi) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(y * pi)) / (0.1e1 + 0.2e1 * x * x - 0.2e1 * x));
                     if (isnormal(value)==0){
                                                                 cout << "fy(x,y,z) value is bounded to 0.0 at x=" << x << " and y= " <<y<<endl;
                                                                 return 0.0;}
                                                                 cout <<"fy(x,y,z) value is " << value << endl;
                                                                 return value;
                     return value;
                  }
          static double mmsFsi01SourceFZ(double x, double y, double z, double tau) {
             double pi=M_PI;
             double value;
             if(x==0.5) x=0.4999999999;
             value= -0.1e-2 * pow(pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1)), -0.1e1 / 0.2e1) * (pow(pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1)), -0.1e1 / 0.2e1) * ((0.5000000000e-8 * pi * (0.2747252747e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) - 0.5494505495e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * pow(x, 0.3e1) + 0.8241758245e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x * x - 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x + 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x - 0.1167582417e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * x * x + 0.7554945054e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * x - 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.4e1) + 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(x, 0.4e1) + 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(x, 0.3e1) + 0.1167582417e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x - 0.7554945054e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.4e1) - 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) - 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * x + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(x, 0.4e1) + 0.1373626374e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) - 0.1030219780e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) + 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * x * x - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * x - 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(x, 0.3e1) - 0.1717032967e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) + 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * x * x - 0.2747252747e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) + 0.1030219780e10 * pi * pow(cos(y * pi), 0.2e1) + 0.1717032967e10 * pow(cos(x * pi), 0.2e1) * pi - 0.5494505495e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x) * pow(0.1e1 + 0.2e1 * x * x - 0.2e1 * x, -0.3e1) + (0.250e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) + 0.250e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x)) * (0.1e1 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) + pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x))) * (-0.2e1 * x + 0.1e1 + 0.25e0 * cos(x * pi) * pi * sin(y * pi) * sin(pi * tau / 0.2e1)) + 0.3004807692e1 * pi * pi * (0.4e1 - 0.8e1 * x + cos(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau)) * pow(sin(x * pi), 0.2e1) * pow(cos(y * pi), 0.2e1) * sin(0.5000000000e0 * pi * tau) / (0.1e1 + 0.2e1 * x * x - 0.2e1 * x) * sin(pi * tau / 0.2e1)) * (0.2e1 * (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1)) * (0.8e1 * x - 0.4e1) - 0.4e1 * pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.2e1) * fabs(0.2e1 * x - 0.1e1) * fabs(0.2e1 * x - 0.1e1) / (0.2e1 * x - 0.1e1)) / 0.2e1 + sqrt(pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1))) * ((0.5000000000e-8 * pi * (-0.7554945054e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) - 0.1648351648e12 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x * x - 0.6868131868e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x + 0.2472527472e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * x * x - 0.2335164834e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * x + 0.2472527472e11 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x - 0.1648351648e11 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x - 0.1648351648e11 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) - 0.1648351648e11 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(x, 0.3e1) - 0.1373626374e11 * sin(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau) - 0.6868131868e10 * cos(x * pi) * pi * pi * x * x * sin(x * pi) + 0.6868131868e10 * cos(x * pi) * pi * pi * x * sin(x * pi) + 0.3434065934e10 * cos(x * pi) * pi * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(x * pi) + 0.5494505494e10 * cos(x * pi) * pi * pi * pow(cos(y * pi), 0.2e1) * sin(x * pi) - 0.2472527472e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x + 0.2335164834e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x + 0.1648351648e11 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) - 0.5494505494e10 * cos(x * pi) * pi * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(x * pi) + 0.5494505495e11 * sin(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * pow(x, 0.3e1) - 0.8241758245e11 * sin(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x * x + 0.6868131868e10 * cos(x * pi) * pi * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x * sin(x * pi) - 0.6868131868e10 * cos(x * pi) * pi * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * sin(x * pi) + 0.2335164834e11 * cos(x * pi) * pi * pi * pow(cos(y * pi), 0.2e1) * x * x * sin(x * pi) - 0.1510989011e11 * cos(x * pi) * pi * pi * pow(cos(y * pi), 0.2e1) * x * sin(x * pi) + 0.8241758240e10 * pi * pi * pow(cos(y * pi), 0.2e1) * cos(x * pi) * pow(x, 0.4e1) * sin(x * pi) - 0.1648351648e11 * pi * pi * pow(cos(y * pi), 0.2e1) * cos(x * pi) * pow(x, 0.3e1) * sin(x * pi) + 0.5494505495e11 * sin(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x + 0.6868131868e10 * pow(cos(x * pi), 0.2e1) * pi * x - 0.5494505495e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) - 0.2472527472e11 * pi * pow(cos(y * pi), 0.2e1) * x * x + 0.1648351648e11 * pi * pow(cos(y * pi), 0.2e1) * x + 0.1648351648e11 * pi * pow(cos(y * pi), 0.2e1) * pow(x, 0.3e1) + 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) + 0.7554945054e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) - 0.3434065934e10 * cos(x * pi) * pi * pi * sin(x * pi) + 0.1648351648e11 * pi * pi * pow(cos(y * pi), 0.2e1) * cos(x * pi) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) * sin(x * pi) + 0.1510989011e11 * cos(x * pi) * pi * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * sin(x * pi) - 0.8241758240e10 * pi * pi * pow(cos(y * pi), 0.2e1) * cos(x * pi) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.4e1) * sin(x * pi) - 0.2335164834e11 * cos(x * pi) * pi * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x * sin(x * pi) - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) - 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi + 0.1648351649e12 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x) * pow(0.1e1 + 0.2e1 * x * x - 0.2e1 * x, -0.3e1) - 0.1500000000e-7 * pi * (0.2747252747e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) - 0.5494505495e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * pow(x, 0.3e1) + 0.8241758245e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x * x - 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x + 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x - 0.1167582417e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * x * x + 0.7554945054e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * x - 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.4e1) + 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(x, 0.4e1) + 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(x, 0.3e1) + 0.1167582417e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x - 0.7554945054e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.4e1) - 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) - 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * x + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(x, 0.4e1) + 0.1373626374e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) - 0.1030219780e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) + 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * x * x - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * x - 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(x, 0.3e1) - 0.1717032967e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) + 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * x * x - 0.2747252747e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) + 0.1030219780e10 * pi * pow(cos(y * pi), 0.2e1) + 0.1717032967e10 * pow(cos(x * pi), 0.2e1) * pi - 0.5494505495e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x) * pow(0.1e1 + 0.2e1 * x * x - 0.2e1 * x, -0.4e1) * (0.4e1 * x - 0.2e1) + (-0.5000000000e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.3e1 / 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) * fabs(0.2e1 * x - 0.1e1) * fabs(0.2e1 * x - 0.1e1) / (0.2e1 * x - 0.1e1) - 0.250e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, -0.2e1) * (0.8e1 * x - 0.4e1) - 0.5000000000e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.3e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) * fabs(0.2e1 * x - 0.1e1) * fabs(0.2e1 * x - 0.1e1) / (0.2e1 * x - 0.1e1) - 0.1000e3 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * (-0.2e1 * x + 0.1e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) - 0.250e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) * pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, -0.2e1) * (0.8e1 * x - 0.4e1)) * (0.1e1 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) + pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x)) + (0.250e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) + 0.250e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x)) * (-0.2000000000e1 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.3e1 / 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) * fabs(0.2e1 * x - 0.1e1) * fabs(0.2e1 * x - 0.1e1) / (0.2e1 * x - 0.1e1) - 0.1e1 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, -0.2e1) * (0.8e1 * x - 0.4e1) - 0.2000000000e1 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.3e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) * fabs(0.2e1 * x - 0.1e1) * fabs(0.2e1 * x - 0.1e1) / (0.2e1 * x - 0.1e1) - 0.4e1 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * (-0.2e1 * x + 0.1e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) - pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) * pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, -0.2e1) * (0.8e1 * x - 0.4e1))) * (-0.2e1 * x + 0.1e1 + 0.25e0 * cos(x * pi) * pi * sin(y * pi) * sin(pi * tau / 0.2e1)) + (0.5000000000e-8 * pi * (0.2747252747e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) - 0.5494505495e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * pow(x, 0.3e1) + 0.8241758245e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x * x - 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x + 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x - 0.1167582417e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * x * x + 0.7554945054e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * x - 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.4e1) + 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(x, 0.4e1) + 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(x, 0.3e1) + 0.1167582417e11 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x * x - 0.7554945054e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * x + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.4e1) - 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(x * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * pow(x, 0.3e1) - 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * x + 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * pow(x, 0.4e1) + 0.1373626374e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) - 0.1030219780e10 * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) + 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * x * x - 0.4120879120e10 * pi * pow(cos(y * pi), 0.2e1) * x - 0.8241758240e10 * pi * pow(cos(y * pi), 0.2e1) * pow(x, 0.3e1) - 0.1717032967e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) + 0.3434065934e10 * pow(cos(x * pi), 0.2e1) * pi * x * x - 0.2747252747e10 * pow(cos(x * pi), 0.2e1) * pi * pow(cos(y * pi), 0.2e1) + 0.1030219780e10 * pi * pow(cos(y * pi), 0.2e1) + 0.1717032967e10 * pow(cos(x * pi), 0.2e1) * pi - 0.5494505495e11 * cos(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) * x) * pow(0.1e1 + 0.2e1 * x * x - 0.2e1 * x, -0.3e1) + (0.250e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) + 0.250e2 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x)) * (0.1e1 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x) + pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * pow(-0.2e1 * x + 0.1e1, 0.2e1) / (0.2e1 + 0.4e1 * x * x - 0.4e1 * x))) * (-0.2e1 - 0.25e0 * sin(x * pi) * sin(y * pi) * sin(pi * tau / 0.2e1) * pi * pi) + 0.3004807692e1 * pi * pi * (-0.8e1 - sin(x * pi) * pi * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau)) * pow(sin(x * pi), 0.2e1) * pow(cos(y * pi), 0.2e1) * sin(0.5000000000e0 * pi * tau) / (0.1e1 + 0.2e1 * x * x - 0.2e1 * x) * sin(pi * tau / 0.2e1) + 0.6009615384e1 * pow(pi, 0.3e1) * (0.4e1 - 0.8e1 * x + cos(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau)) * sin(x * pi) * pow(cos(y * pi), 0.2e1) * sin(0.5000000000e0 * pi * tau) / (0.1e1 + 0.2e1 * x * x - 0.2e1 * x) * sin(pi * tau / 0.2e1) * cos(x * pi) - 0.3004807692e1 * pi * pi * (0.4e1 - 0.8e1 * x + cos(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau)) * pow(sin(x * pi), 0.2e1) * pow(cos(y * pi), 0.2e1) * sin(0.5000000000e0 * pi * tau) * pow(0.1e1 + 0.2e1 * x * x - 0.2e1 * x, -0.2e1) * sin(pi * tau / 0.2e1) * (0.4e1 * x - 0.2e1)) + sqrt(pow(0.2e1 + 0.4e1 * x * x - 0.4e1 * x, 0.2e1) / (0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1))) * (0.1201923077e2 * pow(pi, 0.3e1) * cos(x * pi) * pow(cos(y * pi), 0.2e1) * pow(sin(0.5000000000e0 * pi * tau), 0.2e1) * sin(x * pi) / (0.1e1 + 0.2e1 * x * x - 0.2e1 * x) * (-0.2e1 * x + 0.1e1 + 0.25e0 * cos(x * pi) * pi * sin(y * pi) * sin(pi * tau / 0.2e1)) - 0.1201923077e2 * pi * pi * (0.4e1 - 0.8e1 * x + cos(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau)) * sin(x * pi) * sin(y * pi) * sin(0.5000000000e0 * pi * tau) / (0.1e1 + 0.2e1 * x * x - 0.2e1 * x) * (-0.2e1 * x + 0.1e1 + 0.25e0 * cos(x * pi) * pi * sin(y * pi) * sin(pi * tau / 0.2e1)) + 0.3004807692e1 * pow(pi, 0.3e1) * (0.4e1 - 0.8e1 * x + cos(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau)) * sin(x * pi) * pow(cos(y * pi), 0.2e1) * sin(0.5000000000e0 * pi * tau) / (0.1e1 + 0.2e1 * x * x - 0.2e1 * x) * sin(pi * tau / 0.2e1) * cos(x * pi) + 0.2500000000e-8 * (-0.8241758240e10 * x * cos(x * pi) * pi * pi * cos(y * pi) * sin(0.5000000000e0 * pi * tau) + 0.4120879121e10 * cos(x * pi) * pi * pi * cos(y * pi) * sin(0.5000000000e0 * pi * tau) + 0.7898351648e10 * pow(cos(x * pi), 0.2e1) * pow(pi, 0.3e1) * cos(y * pi) * sin(y * pi) - 0.7898351648e10 * pow(cos(x * pi), 0.2e1) * pow(pi, 0.3e1) * cos(y * pi) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(y * pi) - 0.6868131868e10 * cos(y * pi) * pow(pi, 0.3e1) * sin(y * pi) - 0.1373626374e11 * x * x * cos(y * pi) * pow(pi, 0.3e1) * sin(y * pi) + 0.1373626374e11 * x * cos(y * pi) * pow(pi, 0.3e1) * sin(y * pi) + 0.6868131868e10 * cos(y * pi) * pow(pi, 0.3e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(y * pi) + 0.1373626374e11 * x * x * cos(y * pi) * pow(pi, 0.3e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(y * pi) - 0.1373626374e11 * x * cos(y * pi) * pow(pi, 0.3e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(y * pi) + 0.1373626374e11 * x * x * pow(cos(x * pi), 0.2e1) * pow(pi, 0.3e1) * cos(y * pi) * sin(y * pi) - 0.1373626374e11 * x * pow(cos(x * pi), 0.2e1) * pow(pi, 0.3e1) * cos(y * pi) * sin(y * pi) - 0.1373626374e11 * x * x * pow(cos(x * pi), 0.2e1) * pow(pi, 0.3e1) * cos(y * pi) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(y * pi) + 0.1373626374e11 * x * pow(cos(x * pi), 0.2e1) * pow(pi, 0.3e1) * cos(y * pi) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) * sin(y * pi)) / (0.1e1 + 0.2e1 * x * x - 0.2e1 * x) * sin(x * pi) * cos(y * pi) * pi * sin(pi * tau / 0.2e1) - 0.25e0 * (0.1000000000e-7 * (0.10e2 * x * x - 0.10e2 * x - 0.8241758240e10 * x * cos(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau) + 0.4120879121e10 * cos(x * pi) * pi * sin(y * pi) * sin(0.5000000000e0 * pi * tau) + 0.515109890e9 * pow(cos(x * pi), 0.2e1) * pi * pi - 0.515109890e9 * pow(cos(x * pi), 0.2e1) * pi * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) - 0.3949175824e10 * pow(cos(x * pi), 0.2e1) * pi * pi * pow(cos(y * pi), 0.2e1) + 0.3949175824e10 * pow(cos(x * pi), 0.2e1) * pi * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) + 0.3434065934e10 * pow(cos(y * pi), 0.2e1) * pi * pi + 0.6868131868e10 * x * x * pow(cos(y * pi), 0.2e1) * pi * pi - 0.6868131868e10 * x * pow(cos(y * pi), 0.2e1) * pi * pi - 0.3434065934e10 * pow(cos(y * pi), 0.2e1) * pi * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) - 0.6868131868e10 * x * x * pow(cos(y * pi), 0.2e1) * pi * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) + 0.6868131868e10 * x * pow(cos(y * pi), 0.2e1) * pi * pi * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) - 0.6868131868e10 * x * x * pow(cos(x * pi), 0.2e1) * pi * pi * pow(cos(y * pi), 0.2e1) + 0.6868131868e10 * x * pow(cos(x * pi), 0.2e1) * pi * pi * pow(cos(y * pi), 0.2e1) + 0.6868131868e10 * x * x * pow(cos(x * pi), 0.2e1) * pi * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1) - 0.6868131868e10 * x * pow(cos(x * pi), 0.2e1) * pi * pi * pow(cos(y * pi), 0.2e1) * pow(cos(0.5000000000e0 * pi * tau), 0.2e1)) / (0.1e1 + 0.2e1 * x * x - 0.2e1 * x) + pow(fabs(0.1e1 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) - pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * (0.2e1 * x - 0.1e1) * (-0.2e1 * x + 0.1e1)), -0.2e1) * pow(0.1e1 * pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) - pow(0.1e1 + pow(fabs(0.2e1 * x - 0.1e1), 0.2e1), -0.1e1 / 0.2e1) * (0.2e1 * x - 0.1e1) * (-0.2e1 * x + 0.1e1), 0.2e1) * 0.25e2) * sin(x * pi) * sin(y * pi) * pi * pi * sin(pi * tau / 0.2e1))) - 0.6250000000e-1 * sin(x * pi) * sin(y * pi) * sin(pi * tau / 0.2e1) * pi * pi;
             if (isnormal(value)==0){
                                                         cout << "fz(x,y,z) value is bounded to 0.0 at x=" << x << " and y= " <<y<<endl;
                                                         return 0.0;}
                                                         cout <<"fz(x,y,z) value is " << value << endl;
                                                         return value;
             return value;
          }

          static double mmsFsi01TargetDX(double x, double y, double z, double tau) {
              double value=0;
              return value;
          }
          static double mmsFsi01TargetDY(double x, double y, double z, double tau) {
              return 0.0;
          }
          static double mmsFsi01TargetDZ(double x, double y, double z, double tau) {
                          double pi=M_PI;
                           return 0;
                       }

          static double mmsFsi01TargetFX(double x, double y, double z, double tau) {

              return 0.0;
          }
          static double mmsFsi01TargetFY(double x, double y, double z, double tau) {
              double pi=M_PI;
              double t=tau;
              double value=-0.1000e4 * sin(0.50e2 * pi * t) * cos(0.1e1 * pi * (-0.1e1 + x));
              return value;
          }
          static double mmsFsi01TargetFZ(double x, double y, double z, double tau) {

              return 0.;
          }
          static double mmsFsi04SourceFX(double x, double y, double z, double tau) {
          double pi=M_PI;
           double value=0;
           return value;
                             }
          static double mmsFsi04SourceFY(double x, double y, double z, double tau) {
              double value=0;
              return value;
          }
          static double mmsFsi04SourceFZ(double x, double y, double z, double tau) {
            double pi=M_PI;
            double value=0;
            return value;
          }

          static double mmsFsi04TargetDX(double x, double y, double z, double tau) {
              double value=0;
              return value;
          }
          static double mmsFsi04TargetDY(double x, double y, double z, double tau) {
              double pi = M_PI;
              double value = 0.5*(1.-y) *sin(pi * tau);
              return value;
          }
          static double mmsFsi04TargetDZ(double x, double y, double z, double tau) {
            double pi=M_PI;
              return 0;
          }

          static double mmsFsi04TargetFX(double x, double y, double z, double tau) {
             double pi=M_PI;
             double t=tau;
              return 0;
          }
          static double mmsFsi04TargetFY(double x, double y, double z, double tau) {
             double pi=M_PI;
             double t=tau;
              double value= -0.5001666667e3 * pi * cos(0.1e1 * pi * t) - 0.2000e4 - 0.100000e6 * cos(x) * sin(0.1e1 * pi * t);
              return value;
          }
          static double mmsFsi04TargetFZ(double x, double y, double z, double tau) {

              return 0.;
          }

          static double mmsFsi05SourceFX(double x, double y, double z, double tau) {
          double pi=M_PI;
           double value=0;
           return value;
                             }
          static double mmsFsi05SourceFY(double x, double y, double z, double tau) {
              double value=0;
              return value;
          }
          static double mmsFsi05SourceFZ(double x, double y, double z, double tau) {
            double pi=M_PI;
            double value=0;
            return value;
          }

          static double mmsFsi05TargetDX(double x, double y, double z, double tau) {
              double value=0;
              return value;
          }
          static double mmsFsi05TargetDY(double x, double y, double z, double tau) {
              double pi = M_PI;
              double value = 0.5 *sin(pi * tau);
              return value;
          }
          static double mmsFsi05TargetDZ(double x, double y, double z, double tau) {
            double pi=M_PI;
              return 0;
          }

          static double mmsFsi05TargetFX(double x, double y, double z, double tau) {
             double pi=M_PI;
             double t=tau;
              return 0;
          }
          static double mmsFsi05TargetFY(double x, double y, double z, double tau) {
             double pi=M_PI;
             double t=tau;
              double value= -0.2000e4 + 0.3533333333e0 * sin(x + sin(pi * t)) * sin(pi * t);
              return value;
          }
          static double mmsFsi05TargetFZ(double x, double y, double z, double tau) {

              return 0.;
          }



#endif /* MMSFSI_H_ */
